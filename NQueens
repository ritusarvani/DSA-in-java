public class NQueens {
    public static boolean solveNQueens(int n) {
        int[] board = new int[n]; 
        return solveNQueensUtil(board, 0, n);
    }
    private static boolean solveNQueensUtil(int[] board, int row, int n) {
        if (row == n) {
            printSolution(board, n);  
            return true;  
        }
        boolean res = false;
        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col, n)) {
                board[row] = col;  
                res = solveNQueensUtil(board, row + 1, n) || res;  
            }
        }
        return res;
    }
    private static boolean isSafe(int[] board, int row, int col, int n) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col) {
                return false;
            }
            if (Math.abs(board[i] - col) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }
    private static void printSolution(int[] board, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i] == j) {
                    System.out.print("Q "); 
                } else {
                    System.out.print(". ");  
                }
            }
            System.out.println();
        }
        System.out.println();
    }
    public static void main(String[] args) {
        int n = 4;  
        if (!solveNQueens(n)) {
            System.out.println("No solution exists");
        }
    }
}
